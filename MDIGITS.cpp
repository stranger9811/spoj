#include<cmath>
#include<cstdio>

using namespace std;
int power[]={1,10,100,1000,10000,100000,1000000,10000000,100000000};


//if number == 400 digits will store 2

int calculate(int number,int count[],int digits,int flag)
{
	int most_significant,i;
	most_significant=number/power[digits];
	for(i=0;i<most_significant;i++)
		count[i]+=power[digits];
	if(flag)
		count[0]-=power[digits];
	count[i]+=number%power[digits]+1;
	if(digits==0)
		return 0;
	// adding no of digits generated by lower n-1 digits
	for(i=0;i<10;i++)
		count[i]+=most_significant*digits*power[digits-1];
	if(flag)
		count[0]-=(power[digits]-1)/9;
	//////////////////////////////////////////////////////
	calculate(number%power[digits],count,digits-1,0);
}

int main()
{
	int a,b,temp,p1,p2,i;
	int cnt1[10],cnt2[10];
	while(1)
	{
		scanf("%d %d",&a,&b);
		if(a==0&&b==0)
			break;
		for(i=0;i<10;i++)
		{
			cnt1[i]=0;
			cnt2[i]=0;

		}
		if(a>b)
		{
			temp=a;
			a=b;
			b=temp;
		}
		a=a-1;
		if(a)
		{
			p1 = (int)floor(log10(a));
			calculate(a,cnt1, p1, 1);
		}
		p2 = (int)floor(log10(b));
		calculate(b,cnt2, p2,  1);
		printf("%d",cnt2[0]-cnt1[0]);
		for(i=1; i<10; i++) printf(" %d",cnt2[i]-cnt1[i]);
		printf("\n");


	}
	return 0;

}
